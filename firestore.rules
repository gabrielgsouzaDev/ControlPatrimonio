/**
 * @description This ruleset enforces a strict user-ownership model, where each user can only access their own data.
 * All data is nested under the /users/{userId} collection, ensuring clear ownership.
 * Key Security Decisions:
 *  - Users can only create, read, update, and delete their own profiles and associated data (assets, categories, anomalies).
 *  - Listing other users is disallowed.
 *  - The rules rely on the authenticated user's UID matching the {userId} path segment and relevant document fields (e.g., userId in assets) to grant access.
 *  - Data for assets, categories and anomalies MUST include the `userId` of the owning user. This value is validated on create and update.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Function to check if a user is signed in
    function isSignedIn() {
      return request.auth != null;
    }

    // Function to check if the authenticated user is the owner of the resource
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Function to check if the authenticated user is the owner of the resource and it exists
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user_abc' can create their profile if request.auth.uid == 'user_abc'.
     * @allow (get) - User with UID 'user_abc' can get their profile.
     * @deny (list) - No one can list all user profiles.
     * @deny (update) - User with UID 'user_xyz' cannot update user 'user_abc' profile.
     * @principle Enforces document ownership, ensures only the authenticated user can manage their profile.
     */
    match /users/{userId} {
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow update: if isSignedIn() && isOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(userId) && resource.data.id == userId;

      /**
       * @description Rules for assets belonging to a user.
       * @path /users/{userId}/assets/{assetId}
       * @allow (create) - User 'user_abc' can create an asset under their profile if request.resource.data.userId == 'user_abc'.
       * @allow (get) - User 'user_abc' can get an asset under their profile.
       * @allow (list) - User 'user_abc' can list the assets under their profile.
       * @deny (update) - User 'user_xyz' cannot update an asset belonging to user 'user_abc'.
       * @principle Enforces nested document ownership; only the owning user can manage their assets.
       */
      match /assets/{assetId} {
        allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
        allow get: if isSignedIn() && isOwner(userId);
        allow list: if isSignedIn() && isOwner(userId);
        allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
        allow delete: if isSignedIn() && isExistingOwner(userId);

        /**
         * @description Rules for anomalies associated with an asset.
         * @path /users/{userId}/assets/{assetId}/anomalies/{anomalyId}
         * @allow (create) - User 'user_abc' can create an anomaly for their asset if request.resource.data.userId == 'user_abc'.
         * @allow (get) - User 'user_abc' can get an anomaly associated with their asset.
         * @allow (list) - User 'user_abc' can list the anomalies for their asset.
         * @deny (update) - User 'user_xyz' cannot update an anomaly associated with an asset belonging to user 'user_abc'.
         * @principle Enforces nested document ownership; only the owning user can manage anomalies for their assets.
         */
        match /anomalies/{anomalyId} {
          allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
          allow get: if isSignedIn() && isOwner(userId);
          allow list: if isSignedIn() && isOwner(userId);
          allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
          allow delete: if isSignedIn() && isExistingOwner(userId) && resource.data.userId == userId;
        }
      }

      /**
       * @description Rules for categories created by a user.
       * @path /users/{userId}/categories/{categoryId}
       * @allow (create) - User 'user_abc' can create a category under their profile if request.resource.data.userId == 'user_abc'.
       * @allow (get) - User 'user_abc' can get a category under their profile.
       * @allow (list) - User 'user_abc' can list the categories under their profile.
       * @deny (update) - User 'user_xyz' cannot update a category belonging to user 'user_abc'.
       * @principle Enforces nested document ownership; only the owning user can manage their categories.
       */
      match /categories/{categoryId} {
        allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
        allow get: if isSignedIn() && isOwner(userId);
        allow list: if isSignedIn() && isOwner(userId);
        allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
        allow delete: if isSignedIn() && isExistingOwner(userId);
      }
    }
  }
}