/**
 * @fileoverview Firestore Security Rules for AssetFlow Application
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. All data (assets, categories, history logs, and anomalies)
 * is nested under a user's document, ensuring that only the authenticated user can access their own data.
 *
 * Data Structure:
 * Data is organized hierarchically under `/users/{userId}`, which corresponds to the Firebase Auth UID.
 * Assets, categories, history logs, and anomalies are stored as subcollections under each user.
 *
 * Key Security Decisions:
 * - User profiles can only be created by the user themselves (self-creation). Updates are denied to prevent profile modification.
 * - Listing of documents is allowed only within a user's subcollections. Listing the /users collection is denied.
 * - All write operations (create, update, delete) are restricted to the owner of the data.
 *
 * Denormalization for Authorization:
 * The `userId` field is present in all documents nested under `/users/{userId}`. This denormalization simplifies
 * the security rules by allowing us to verify ownership without additional `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Prevents listing all users.
     * @path /users
     * @allow None - Listing all users is not permitted.
     * @deny list: Always.
     * @principle Prevents unauthorized access to user information.
     */
    match /users {
      allow list: if false;
    }

    /**
     * @description Manages user profile access.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their profile.
     * @deny (update) User with UID 'user123' cannot update their profile after creation.
     * @principle Enforces document ownership and immutability after creation.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update, delete: if false;
    }

    /**
     * @description Manages asset access for each user.
     * @path /users/{userId}/assets/{assetId}
     * @allow (create) User with UID 'user123' can create an asset under their user ID.
     * @deny (update) User with UID 'user456' cannot update an asset under user 'user123'.
     * @principle Enforces document ownership for all writes.
     */
    match /users/{userId}/assets/{assetId} {
      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && resource.data.userId == userId;
      allow delete: if isSignedIn() && isExistingOwner(userId) && resource.data.userId == userId;
    }

    /**
     * @description Manages category access for each user.
     * @path /users/{userId}/categories/{categoryId}
     * @allow (create) User with UID 'user123' can create a category under their user ID.
     * @deny (update) User with UID 'user456' cannot update a category under user 'user123'.
     * @principle Enforces document ownership for all writes.
     */
    match /users/{userId}/categories/{categoryId} {
      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && resource.data.userId == userId;
      allow delete: if isSignedIn() && isExistingOwner(userId) && resource.data.userId == userId;
    }

    /**
     * @description Manages history log access for each user.
     * @path /users/{userId}/history/{historyId}
     * @allow (create) User with UID 'user123' can create a history log under their user ID.
     * @deny (update) User with UID 'user456' cannot update a history log under user 'user123'.
     * @principle Enforces document ownership for all writes.
     */
    match /users/{userId}/history/{historyId} {
      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && resource.data.userId == userId;
      allow delete: if isSignedIn() && isExistingOwner(userId) && resource.data.userId == userId;
    }

    /**
     * @description Manages anomaly access for a specific asset.
     * @path /users/{userId}/assets/{assetId}/anomalies/{anomalyId}
     * @allow (create) User with UID 'user123' can create an anomaly under their asset.
     * @deny (update) User with UID 'user456' cannot update an anomaly under user 'user123's asset.
     * @principle Enforces document ownership for all writes.
     */
    match /users/{userId}/assets/{assetId}/anomalies/{anomalyId} {
      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && resource.data.userId == userId;
      allow delete: if isSignedIn() && isExistingOwner(userId) && resource.data.userId == userId;
    }
  }
}

/**
 * @description Checks if the user is signed in.
 * @return {boolean} True if the user is signed in, false otherwise.
 */
function isSignedIn() {
  return request.auth != null;
}

/**
 * @description Checks if the user is the owner of the document.
 * @param {string} userId The user ID to check against.
 * @return {boolean} True if the user is the owner, false otherwise.
 */
function isOwner(userId) {
  return request.auth.uid == userId;
}

/**
 * @description Checks if the user is the owner of the document and the document exists.
 * @param {string} userId The user ID to check against.
 * @return {boolean} True if the user is the owner and the document exists, false otherwise.
 */
function isExistingOwner(userId) {
  return isOwner(userId) && resource != null;
}