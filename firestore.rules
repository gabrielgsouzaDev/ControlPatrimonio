/**
 * @fileoverview Firestore Security Rules for AssetFlow application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for all data.
 * All data is nested under `/users/{userId}` to ensure that only the authenticated user can access their own data.
 * Assets, categories, and history logs are all stored under the user's document.
 * Anomaly documents are stored under their corresponding asset document.
 *
 * Data Structure:
 * /users/{userId} (UserProfile)
 * /users/{userId}/assets/{assetId} (Asset)
 * /users/{userId}/categories/{categoryId} (Category)
 * /users/{userId}/history/{historyId} (HistoryLog)
 * /users/{userId}/assets/{assetId}/anomalies/{anomalyId} (Anomaly)
 *
 * Key Security Decisions:
 * - Strict user-ownership: Users can only read and write data under their own user ID.
 * - All listing operations are restricted to the owner.
 * - Data validation is relaxed in the prototyping phase, focusing on ownership and relational integrity.
 *
 * Denormalization for Authorization:
 *  - Each document (Asset, Category, HistoryLog, Anomaly) contains a `userId` field that matches the authenticated user's UID,
 *    allowing for simple `isOwner()` checks without additional reads.
 *
 * Structural Segregation:
 *  - All user-specific data is stored under the /users/{userId} path, preventing accidental public exposure.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own user profile data.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their profile with matching userId in the document.
     * @allow (get, update, delete) User with UID 'user123' can get, update, and delete their own profile.
     * @deny (create) User with UID 'user456' cannot create a profile with userId 'user123'.
     * @deny (get, update, delete) User with UID 'user456' cannot get, update, or delete the profile of user 'user123'.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }
      
      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows users to manage their own assets.
     * @path /users/{userId}/assets/{assetId}
     * @allow (create) User with UID 'user123' can create an asset under their profile.
     * @allow (get, list, update, delete) User with UID 'user123' can get, list, update, and delete their own assets.
     * @deny (create) User with UID 'user456' cannot create an asset under user 'user123's profile.
     * @deny (get, list, update, delete) User with UID 'user456' cannot get, list, update, or delete assets under user 'user123's profile.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId}/assets/{assetId} {
      allow get: if request.auth.uid == userId;
      allow list: if request.auth.uid == userId;
      allow create: if request.auth.uid == userId;
      allow update: if request.auth.uid == userId;
      allow delete: if request.auth.uid == userId;
    }

    /**
     * @description Allows users to manage their own categories.
     * @path /users/{userId}/categories/{categoryId}
     * @allow (create) User with UID 'user123' can create a category under their profile.
     * @allow (get, list, update, delete) User with UID 'user123' can get, list, update, and delete their own categories.
     * @deny (create) User with UID 'user456' cannot create a category under user 'user123's profile.
     * @deny (get, list, update, delete) User with UID 'user456' cannot get, list, update, or delete categories under user 'user123's profile.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId}/categories/{categoryId} {
      allow get: if request.auth.uid == userId;
      allow list: if request.auth.uid == userId;
      allow create: if request.auth.uid == userId;
      allow update: if request.auth.uid == userId;
      allow delete: if request.auth.uid == userId;
    }

    /**
     * @description Allows users to view their own history logs.
     * @path /users/{userId}/history/{historyId}
     * @allow (create) User with UID 'user123' can create a history log under their profile.
     * @allow (get, list, update, delete) User with UID 'user123' can get, list, update, and delete their own history logs.
     * @deny (create) User with UID 'user456' cannot create a history log under user 'user123's profile.
     * @deny (get, list, update, delete) User with UID 'user456' cannot get, list, update, or delete history logs under user 'user123's profile.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId}/history/{historyId} {
      allow get: if request.auth.uid == userId;
      allow list: if request.auth.uid == userId;
      allow create: if request.auth.uid == userId;
      allow update: if request.auth.uid == userId;
      allow delete: if request.auth.uid == userId;
    }

    /**
     * @description Allows users to manage anomalies associated with their assets.
     * @path /users/{userId}/assets/{assetId}/anomalies/{anomalyId}
     * @allow (create) User with UID 'user123' can create an anomaly for their asset.
     * @allow (get, list, update, delete) User with UID 'user123' can get, list, update, and delete anomalies for their assets.
     * @deny (create) User with UID 'user456' cannot create an anomaly under user 'user123's asset.
     * @deny (get, list, update, delete) User with UID 'user456' cannot get, list, update, or delete anomalies under user 'user123's asset.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId}/assets/{assetId}/anomalies/{anomalyId} {
        allow get: if request.auth.uid == userId;
        allow list: if request.auth.uid == userId;
        allow create: if request.auth.uid == userId;
        allow update: if request.auth.uid == userId;
        allow delete: if request.auth.uid == userId;
    }
  }
}