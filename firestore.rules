/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a mixed security model, balancing public data access with private user profiles.
 *
 * Data Structure:
 * - /assets/{assetId}: Shared asset data, accessible to all authenticated users.
 * - /categories/{categoryId}: Shared category data, accessible to all authenticated users.
 * - /history/{historyId}: Shared history log data, accessible to all authenticated users.
 * - /users/{userId}: Private user profile data, accessible only to the owning user.
 * - /assets/{assetId}/anomalies/{anomalyId}: Anomalies for assets, accessible to all authenticated users.
 *
 * Key Security Decisions:
 * - Authenticated User Required: All access to shared data (assets, categories, history) requires the user to be authenticated.
 * - User Ownership: User profiles are strictly owned by the user, enforced through the 'isOwner' helper function.
 * - No User Listing: Listing all users is disallowed to protect user privacy.
 * - Denormalization for Audit: Documents in `/assets`, `/categories`, `/history` collections contain a `userId` field to track the user who created or last modified the document.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Check if the user is signed in
    function isSignedIn() {
      return request.auth != null;
    }

    // Check if the user is the owner of the resource
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their profile if request.auth.uid == 'user123'.
     * @allow (get) User with UID 'user123' can read their profile if request.auth.uid == 'user123'.
     * @allow (update) User with UID 'user123' can update their profile if request.auth.uid == 'user123'.
     * @allow (delete) User with UID 'user123' can delete their profile if request.auth.uid == 'user123'.
     * @deny (create) User with UID 'user456' cannot create profile for 'user123'.
     * @deny (get) User with UID 'user456' cannot read profile of 'user123'.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow create: if isSignedIn() && isOwner(userId);
      allow get, update, delete: if isSignedIn() && isOwner(userId);
      allow list: if false; // Prevents listing all users
    }

    /**
     * @description Controls access to asset documents.
     * @path /assets/{assetId}
     * @allow (create) Authenticated user can create an asset.
     * @allow (get) Any user can read an asset.
     * @allow (update) Authenticated user can update an asset.
     * @allow (delete) Authenticated user can delete an asset.
     * @deny (create) Unauthenticated user cannot create an asset.
     * @principle Authenticated users can manage shared assets.
     */
    match /assets/{assetId} {
      allow create, get, list, update, delete: if isSignedIn();
    }

    /**
     * @description Controls access to anomaly documents for specific assets.
     * @path /assets/{assetId}/anomalies/{anomalyId}
     * @allow (create) Authenticated user can create an anomaly.
     * @allow (get) Any user can read an anomaly.
     * @allow (update) Authenticated user can update an anomaly.
     * @allow (delete) Authenticated user can delete an anomaly.
     * @deny (create) Unauthenticated user cannot create an anomaly.
     * @principle Authenticated users can manage anomalies.
     */
    match /assets/{assetId}/anomalies/{anomalyId} {
      allow create, get, list, update, delete: if isSignedIn();
    }

    /**
     * @description Controls access to category documents.
     * @path /categories/{categoryId}
     * @allow (create) Authenticated user can create a category.
     * @allow (get) Any user can read a category.
     * @allow (update) Authenticated user can update a category.
     * @allow (delete) Authenticated user can delete a category.
     * @deny (create) Unauthenticated user cannot create a category.
     * @principle Authenticated users can manage shared categories.
     */
    match /categories/{categoryId} {
      allow create, get, list, update, delete: if isSignedIn();
    }

    /**
     * @description Controls access to history log documents.
     * @path /history/{historyId}
     * @allow (create) Authenticated user can create a history log entry.
     * @allow (get) Any user can read a history log entry.
     * @allow (update) Authenticated user can update a history log entry.
     * @allow (delete) Authenticated user can delete a history log entry.
     * @deny (create) Unauthenticated user cannot create a history log entry.
     * @principle Authenticated users can manage shared history logs.
     */
    match /history/{historyId} {
      allow create, get, list, update, delete: if isSignedIn();
    }
  }
}