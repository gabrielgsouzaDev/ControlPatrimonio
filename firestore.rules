/**
 * @fileOverview
 * This ruleset enforces a strict user-ownership model for all data within the application.
 * All data is nested under `/users/{userId}`, ensuring that only the authenticated user can access their own data.
 *
 * Data Structure:
 * - `/users/{userId}`: User profile information.
 * - `/users/{userId}/assets/{assetId}`: Assets owned by the user.
 * - `/users/{userId}/anomalies/{anomalyId}`: Anomalies associated with the user's assets.
 *
 * Key Security Decisions:
 * - Users can only create, read, update, and delete their own profiles and associated data.
 * - Listing all users is disallowed.
 * - Data consistency between the path and the document's internal `userId` field is enforced on creation and updates.
 * - Deletion is only allowed if the document exists and the user is the owner.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Global functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) User with matching UID creates their profile.
     * @allow (get) User with matching UID reads their profile.
     * @deny (list) Listing all users is not allowed.
     * @allow (update) User with matching UID updates their profile.
     * @allow (delete) User with matching UID deletes their profile.
     * @principle Enforces document ownership and prevents unauthorized access to user profiles.
     */
    match /users/{userId} {
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow update: if isSignedIn() && isOwner(userId) && resource.data.id == userId;
      allow delete: if isSignedIn() && isExistingOwner(userId) && resource.data.id == userId;

      /**
       * @description Rules for assets owned by a user.
       * @path /users/{userId}/assets/{assetId}
       * @allow (create) User creates an asset with their UID as the owner.
       * @allow (get) User reads their own asset.
       * @allow (list) User lists their own assets.
       * @allow (update) User updates their own existing asset, maintaining ownership.
       * @allow (delete) User deletes their own existing asset.
       * @principle Enforces document ownership for assets and prevents unauthorized modifications.
       */
      match /assets/{assetId} {
        allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
        allow get: if isSignedIn() && isOwner(userId);
        allow list: if isSignedIn() && isOwner(userId);
        allow update: if isSignedIn() && isExistingOwner(userId) && resource.data.userId == userId;
        allow delete: if isSignedIn() && isExistingOwner(userId);

        /**
         * @description Rules for anomalies associated with a user's assets.
         * @path /users/{userId}/assets/{assetId}/anomalies/{anomalyId}
         * @allow (create) User creates an anomaly for their asset, maintaining ownership.
         * @allow (get) User reads their own anomaly.
         * @allow (list) User lists anomalies for their own asset.
         * @allow (update) User updates their own existing anomaly, maintaining ownership.
         * @allow (delete) User deletes their own existing anomaly.
         * @principle Enforces document ownership for anomalies and prevents unauthorized modifications.
         */
        match /anomalies/{anomalyId} {
          allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
          allow get: if isSignedIn() && isOwner(userId);
          allow list: if isSignedIn() && isOwner(userId);
          allow update: if isSignedIn() && isExistingOwner(userId) && resource.data.userId == userId;
          allow delete: if isExistingOwner(userId) && resource.data.userId == userId;
        }
      }
    }
  }
}