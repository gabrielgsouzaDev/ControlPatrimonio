rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces strict user-ownership for user profiles.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their own profile document.
     * @allow (get, update, delete) User with UID 'user123' can read, update, and delete their own profile.
     * @deny (create) User with UID 'user456' cannot create a profile document for user 'user123'.
     * @deny (get, update, delete) User with UID 'user456' cannot read, update, or delete the profile of user 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Allows any authenticated user to read assets, but restricts creation, updates, and deletions to authenticated users.
     * @path /assets/{assetId}
     * @allow (get, list) Any authenticated user can read the asset data.
     * @allow (create) User with UID 'user123' can create a new asset with userId: 'user123'.
     * @allow (update) User with UID 'user123' can update an existing asset they own, with userId: 'user123'.
     * @allow (delete) User with UID 'user123' can delete an existing asset they own, with userId: 'user123'.
     * @deny (create) User with UID 'user456' cannot create an asset with userId: 'user123'.
     * @deny (update) User with UID 'user456' cannot update an asset owned by user 'user123'.
     * @deny (delete) User with UID 'user456' cannot delete an asset owned by user 'user123'.
     * @principle Allows public read access while enforcing ownership for writes.
     */
    match /assets/{assetId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows any authenticated user to read categories, but restricts creation, updates, and deletions to authenticated users.
     * @path /categories/{categoryId}
     * @allow (get, list) Any authenticated user can read the category data.
     * @allow (create) User with UID 'user123' can create a new category with userId: 'user123'.
     * @allow (update) User with UID 'user123' can update an existing category they own, with userId: 'user123'.
     * @allow (delete) User with UID 'user123' can delete an existing category they own, with userId: 'user123'.
     * @deny (create) User with UID 'user456' cannot create a category with userId: 'user123'.
     * @deny (update) User with UID 'user456' cannot update a category owned by user 'user123'.
     * @deny (delete) User with UID 'user456' cannot delete a category owned by user 'user123'.
     * @principle Allows public read access while enforcing ownership for writes.
     */
    match /categories/{categoryId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows any authenticated user to read locations, but restricts creation, updates, and deletions to authenticated users.
     * @path /locations/{locationId}
     * @allow (get, list) Any authenticated user can read the location data.
     * @allow (create) User with UID 'user123' can create a new location with userId: 'user123'.
     * @allow (update) User with UID 'user123' can update an existing location they own, with userId: 'user123'.
     * @allow (delete) User with UID 'user123' can delete an existing location they own, with userId: 'user123'.
     * @deny (create) User with UID 'user456' cannot create a location with userId: 'user123'.
     * @deny (update) User with UID 'user456' cannot update a location owned by user 'user123'.
     * @deny (delete) User with UID 'user456' cannot delete a location owned by user 'user123'.
     * @principle Allows public read access while enforcing ownership for writes.
     */
    match /locations/{locationId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows any authenticated user to read the history log, but restricts creation to authenticated users.
     * @path /history/{historyId}
     * @allow (get, list) Any authenticated user can read the history log data.
     * @allow (create) User with UID 'user123' can create a new history log entry with userId: 'user123'.
     * @deny (create) User with UID 'user456' cannot create a history log entry with userId: 'user123'.
     * @principle Allows public read access while enforcing authenticated access for writes.
     */
    match /history/{historyId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }
  }
}