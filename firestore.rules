/**
 * @fileoverview Firestore Security Rules for AssetFlow application.
 *
 * Core Philosophy:
 * This ruleset provides open read access and owner-controlled write access for shared data (assets, categories, locations, history).
 * User profiles are private, with each user only able to manage their own profile.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles, private to each user.
 * - /assets/{assetId}: Stores the global list of all assets.
 * - /categories/{categoryId}: Stores the global list of asset categories.
 * - /locations/{locationId}: Stores the global list of asset locations.
 * - /history/{historyId}: Stores the global change history for all assets.
 *
 * Key Security Decisions:
 * - User profiles are strictly private; users can only read/write their own profile data.
 * - Global data collections (assets, categories, locations, history) are publicly readable to facilitate collaboration.
 * - Global data collections (assets, categories, locations, history) have owner-only writes, as determined by the userId field in each document.
 * - Listing of user documents is not allowed.
 *
 * Denormalization for Authorization:
 * - The `Asset`, `Category`, and `Location` documents all contain a `userId` field that is used to enforce ownership for write operations.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own profile if the ID matches their auth UID.
     * @allow (get, update, delete) - Authenticated user can read, update, and delete their own profile if the ID matches their auth UID.
     * @deny (create) - If the user is not authenticated.
     * @deny (get, update, delete) - If the user is not the owner of the profile.
     * @deny (list) - Listing user documents is not allowed.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.id == request.auth.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to asset documents.
     * @path /assets/{assetId}
     * @allow (get, list) - Any authenticated user can read asset documents.
     * @allow (create) - Any authenticated user can create a new asset, provided the userId matches their auth UID.
     * @allow (update, delete) - Only the user who created the asset can update or delete it.
     * @deny (create) - If the userId does not match the authenticated user's UID.
     * @deny (update, delete) - If the user is not the owner of the asset.
     * @principle Enforces document ownership for writes and allows public read access.
     */
    match /assets/{assetId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner() {
        return resource.data.userId == request.auth.uid;
      }

       function isNewOwner() {
        return request.resource.data.userId == request.auth.uid;
      }

      function isExistingOwner() {
        return isOwner() && resource != null;
      }
      
      allow get, list: if true;

      allow create: if isSignedIn() && isNewOwner();
      allow update: if isExistingOwner();
      allow delete: if isExistingOwner();
    }

    /**
     * @description Controls access to category documents.
     * @path /categories/{categoryId}
     * @allow (get, list) - Any authenticated user can read category documents.
     * @allow (create) - Any authenticated user can create a new category, provided the userId matches their auth UID.
     * @allow (update, delete) - Only the user who created the category can update or delete it.
     * @deny (create) - If the userId does not match the authenticated user's UID.
     * @deny (update, delete) - If the user is not the owner of the category.
     * @principle Enforces document ownership for writes and allows public read access.
     */
    match /categories/{categoryId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner() {
        return resource.data.userId == request.auth.uid;
      }

      function isNewOwner() {
        return request.resource.data.userId == request.auth.uid;
      }

      function isExistingOwner() {
        return isOwner() && resource != null;
      }

      allow get, list: if true;

      allow create: if isSignedIn() && isNewOwner();
      allow update: if isExistingOwner();
      allow delete: if isExistingOwner();
    }

    /**
     * @description Controls access to location documents.
     * @path /locations/{locationId}
     * @allow (get, list) - Any authenticated user can read location documents.
     * @allow (create) - Any authenticated user can create a new location, provided the userId matches their auth UID.
     * @allow (update, delete) - Only the user who created the location can update or delete it.
     * @deny (create) - If the userId does not match the authenticated user's UID.
     * @deny (update, delete) - If the user is not the owner of the location.
     * @principle Enforces document ownership for writes and allows public read access.
     */
    match /locations/{locationId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner() {
        return resource.data.userId == request.auth.uid;
      }

      function isNewOwner() {
        return request.resource.data.userId == request.auth.uid;
      }

      function isExistingOwner() {
        return isOwner() && resource != null;
      }

      allow get, list: if true;

      allow create: if isSignedIn() && isNewOwner();
      allow update: if isExistingOwner();
      allow delete: if isExistingOwner();
    }

        /**
     * @description Controls access to history log documents.
     * @path /history/{historyId}
     * @allow (get, list) - Any authenticated user can read history log documents.
     * @allow (create) - Any authenticated user can create a new history log, provided the userId matches their auth UID.
     * @allow (update, delete) - Only the user who created the history log can update or delete it.
     * @deny (create) - If the userId does not match the authenticated user's UID.
     * @deny (update, delete) - If the user is not the owner of the history log.
     * @principle Enforces document ownership for writes and allows public read access.
     */
    match /history/{historyId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner() {
        return resource.data.userId == request.auth.uid;
      }

      function isNewOwner() {
        return request.resource.data.userId == request.auth.uid;
      }

      function isExistingOwner() {
        return isOwner() && resource != null;
      }

      allow get, list: if true;

      allow create: if isSignedIn() && isNewOwner();
      allow update: if isExistingOwner();
      allow delete: if isExistingOwner();
    }
  }
}