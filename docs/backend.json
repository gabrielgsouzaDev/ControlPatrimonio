{
  "entities": {
    "UserProfile": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User Profile",
      "type": "object",
      "description": "Represents a user's profile in the AssetFlow application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the user, matches Firebase Auth UID."
        },
        "email": {
          "type": "string",
          "description": "Email address of the user.",
          "format": "email"
        },
        "name": {
          "type": "string",
          "description": "The user's display name."
        }
      },
      "required": ["id", "email", "name"]
    },
    "Asset": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Asset",
      "type": "object",
      "description": "Represents an asset or item in the inventory.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the asset."
        },
        "name": {
          "type": "string",
          "description": "Name of the asset."
        },
        "codeId": {
          "type": "string",
          "description": "Code or ID associated with the asset."
        },
        "city": {
          "type": "string",
          "description": "City or location where the asset is stored."
        },
        "value": {
          "type": "number",
          "description": "Value of the asset."
        },
        "observation": {
          "type": "string",
          "description": "Additional notes or observations about the asset."
        },
        "userId": {
          "type": "string",
          "description": "ID of the user who owns this asset."
        },
        "categoryId": {
            "type": "string",
            "description": "ID of the category this asset belongs to."
        }
      },
      "required": ["id", "name", "codeId", "city", "value", "userId", "categoryId"]
    },
    "Category": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Category",
      "type": "object",
      "description": "Represents a category for assets.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the category."
        },
        "name": {
          "type": "string",
          "description": "Name of the category."
        },
        "userId": {
          "type": "string",
          "description": "ID of the user who created this category."
        }
      },
      "required": ["id", "name", "userId"]
    },
    "HistoryLog": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "title": "History Log",
        "type": "object",
        "description": "Represents a log entry for a change made to an asset.",
        "properties": {
            "id": {
                "type": "string",
                "description": "Unique identifier for the history log entry."
            },
            "assetId": {
                "type": "string",
                "description": "ID of the asset that was changed."
            },
            "assetName": {
                "type": "string",
                "description": "Name of the asset at the time of the change."
            },
            "codeId": {
                "type": "string",
                "description": "Code ID of the asset."
            },
            "action": {
                "type": "string",
                "enum": ["Criado", "Atualizado", "Exclu√≠do"]
            },
            "details": {
                "type": "string",
                "description": "Description of what was changed."
            },
            "userId": {
                "type": "string",
                "description": "ID of the user who performed the action."
            },
            "userDisplayName": {
                "type": "string",
                "description": "Display name of the user who performed the action."
            },
            "timestamp": {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp when the action occurred."
            }
        },
        "required": ["id", "assetId", "assetName", "codeId", "action", "details", "userId", "userDisplayName", "timestamp"]
    },
    "Anomaly": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "title": "Anomaly",
        "type": "object",
        "description": "Represents an anomaly detected for an asset.",
        "properties": {
            "id": {
                "type": "string",
                "description": "Unique identifier for the anomaly."
            },
            "assetId": {
                "type": "string",
                "description": "ID of the asset with the anomaly."
            },
            "anomalyType": {
                "type": "string",
                "description": "Type of anomaly (e.g., 'value', 'location')."
            },
            "description": {
                "type": "string",
                "description": "Description of the anomaly."
            },
            "userId": {
              "type": "string",
              "description": "ID of the user who owns the asset related to this anomaly."
            }
        },
        "required": ["id", "assetId", "anomalyType", "description", "userId"]
    }
  },
  "auth": {
    "providers": [
      "password",
      "google"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "UserProfile",
          "schema": {
            "$ref": "#/entities/UserProfile"
          },
          "description": "Stores user profiles. The 'userId' corresponds to the Firebase Auth UID."
        }
      },
      {
        "path": "/users/{userId}/assets/{assetId}",
        "definition": {
          "entityName": "Asset",
          "schema": {
            "$ref": "#/entities/Asset"
          },
          "description": "Stores asset information for each user."
        }
      },
      {
        "path": "/users/{userId}/categories/{categoryId}",
        "definition": {
          "entityName": "Category",
          "schema": {
            "$ref": "#/entities/Category"
          },
          "description": "Stores asset categories created by each user."
        }
      },
      {
        "path": "/users/{userId}/history/{historyId}",
        "definition": {
          "entityName": "HistoryLog",
          "schema": {
            "$ref": "#/entities/HistoryLog"
          },
          "description": "Stores change history logs for each user's assets."
        }
      },
      {
        "path": "/users/{userId}/assets/{assetId}/anomalies/{anomalyId}",
        "definition": {
            "entityName": "Anomaly",
            "schema": {
                "$ref": "#/entities/Anomaly"
            },
            "description": "Stores anomalies detected for a specific asset."
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to be user-centric, ensuring data privacy and security by nesting all user-generated content (assets, categories, history) under their unique user ID. This path-based ownership model (`/users/{userId}/...`) is fundamental for writing simple and effective security rules, as it allows us to easily grant access based on the authenticated user's UID. This design prevents data leakage between users and simplifies queries, as we can fetch all data for a specific user from a predictable root path."
  }
}